    /*
    std::cout << "Sport Class" << std::endl;
    Sport test_sport;
    std::cout << test_sport << std::endl;
    std::cout << "Copy Constructor" << std::endl;
    Sport test_sport2(test_sport);
    std::cout << test_sport2 << std::endl;
    std::cout << "Constructor w Args" << std::endl;
    Sport test_sport3(2, 1, 1);
    std::cout << test_sport3 << std::endl;
    std::cout << "== operator" << std::endl;
    if(test_sport == test_sport2)
        std::cout << "== operator working" << std::endl;
    std::cout << std::endl;
    std::cout << "Hockey Class" << std::endl;
    Hockey test_hockey;
    std::cout << test_hockey << std::endl;
    std::cout << "Hocky Constructor w Args" << std::endl;
    Hockey test_hockey2(5, 8, 10, 15, 5, 10);
    std::cout << test_hockey2 << std::endl;
    test_hockey2.add_game(1,2,8,1);
    std::cout << test_hockey2 << std::endl;
    std::cout << "Hockey Compare Function" << std::endl;
    if(test_hockey2.compare(test_hockey) == false)
        std::cout << "Compare Success" << std::endl;
    Hockey test_hockey3;
    if(test_hockey3.compare(test_hockey) == true)
        std::cout << "Compare Success" << std::endl;
    if(test_hockey3 != test_hockey2)
        std::cout << "!= Working" << std::endl;
    std::cout << std::endl;
    std::cout << "Basketball Class" << std::endl;
    Basketball test_basketball;
    std::cout << test_basketball << std::endl;
    Basketball test_basketball2;
    std::cout << "!= Operator" << std::endl;
    if(test_basketball != test_basketball2 == true)
        std::cout << "!= Operator Success" << std::endl;
    std::cout << "Compare Function" << std::endl;
    if(test_basketball.compare(test_basketball2))
        std::cout << "Compare Function Sucess" << std::endl;
    std::cout << "Basketball Constructor w Args" << std::endl;
    Basketball test_basketball3(225, 40, 50, 2, 2, 0);
    std::cout << test_basketball3 << std::endl;
    test_basketball3.add_game(120, 50, 30, 1);
    std::cout << "Basketball Add Game" << std::endl;
    std::cout << test_basketball3 << std::endl;
    
    std::cout << "Soccer Class" << std::endl;
    Soccer test_soccer;
    std::cout << test_soccer << std::endl;
    test_soccer.add_game(3, 60, 10, 1);
    std::cout << test_soccer << std::endl;
    Soccer test_soccer2;
    std::cout << test_soccer2 << std::endl;
    Soccer test_soccer3(3, 60, 10, 1, 1, 0);
    std::cout << test_soccer3 << std::endl;

    std::cout << "Compare" << std::endl;
    std::cout << "Compare 1 & 2" << std::endl;
    if(test_soccer.compare(test_soccer2))
        std::cout << "Match" << std::endl;
    if(test_soccer != test_soccer2)
        std::cout << "Not a Match" << std::endl;
    std::cout << "Compare 1 & 3" << std::endl;
    if(test_soccer.compare(test_soccer3))
        std::cout << "Match" << std::endl;
    if(test_soccer != test_soccer3)
        std::cout << "Not a Match" << std::endl;
        */

        std::cout << "Sport Class" << std::endl;
    Basketball test_sport (400, 340, 123, 4, 3, 1);
    std::cout << test_sport << std::endl;

    std::cout << "Athlete Class" << std::endl;
    char * test_char = new char [strlen("USA National Team")+1];
    strcpy(test_char,"USA National Team");
    std::string * test_string = new std::string("United States of America");
    Athlete test_athlete(test_char, test_string, 5);
    std::cout << test_athlete << std::endl;

    std::cout << "Athlete Class Insert" << std::endl;
    test_athlete.insert(test_sport);
    std::cout << test_athlete << std::endl;

    std::cout << "Node Class" << std::endl;
    Node test_node;
    std::cout << test_node << std::endl;
    std::cout << "Node Class Insert" << std::endl;
    test_node.insert(test_athlete);
    std::cout << test_node << std::endl;

    std::cout << "Sport Class 2" << std::endl;
    Basketball test_sport2 (500, 250, 32, 10, 1, 9);
    std::cout << test_sport2 << std::endl;

    std::cout << "Athlete Class 2" << std::endl;
    char * test_char2 = new char [strlen("USA National Team")+1];
    strcpy(test_char2,"USA National Team");
    std::string * test_string2 = new std::string("United States of America");
    Athlete test_athlete2(test_char2, test_string2, 5);
    std::cout << test_athlete2 << std::endl;

    std::cout << "Athlete Class Insert 2" << std::endl;
    test_athlete2.insert(test_sport2);
    std::cout << test_athlete2 << std::endl;

    std::cout << "Node Class 2" << std::endl;
    Node test_node2;
    std::cout << test_node2 << std::endl;
    std::cout << "Node Class + Overload" << std::endl;
    test_node2 = test_node2 + test_athlete2;
    std::cout << test_node2 << std::endl;


    delete [] test_char;
    delete test_string;
    delete [] test_char2;
    delete test_string2;

        Basketball test_sport (400, 340, 123, 4, 3, 1);
    char * test_char = new char [strlen("USA National Team")+1];
    strcpy(test_char,"USA");
    std::string * test_string = new std::string("United States of America");
    Athlete test_athlete(test_char, test_string, 5);
    test_athlete.insert(test_sport);
    Node test_node;
    test_node.insert(test_athlete);

    Basketball test_sport2 (500, 250, 32, 10, 1, 9);
    char * test_char2 = new char [strlen("Brazil National Team")+1];
    strcpy(test_char2,"Brazil");
    std::string * test_string2 = new std::string("United States of America");
    Athlete test_athlete2(test_char2, test_string2, 4);
    test_athlete2.insert(test_sport2);
    Node test_node2;
    test_node2 = test_node2 + test_athlete2;

    Basketball test_sport3 (600, 300, 32, 10, 1, 9);
    char * test_char3 = new char [strlen("Canada National Team")+1];
    strcpy(test_char3,"Canada");
    std::string * test_string3 = new std::string("United States of America");
    Athlete test_athlete3(test_char3, test_string3, 6);
    test_athlete3.insert(test_sport3);
    Node test_node3;
    test_node3 = test_node3 + test_athlete3;
    
    Basketball test_sport4 (100, 100, 22, 10, 1, 9);
    char * test_char4 = new char [strlen("Mexico National Team")+1];
    strcpy(test_char4,"Mexico");
    std::string * test_string4 = new std::string("United States of America");
    Athlete test_athlete4(test_char4, test_string4, 3);
    test_athlete4.insert(test_sport4);
    Node test_node4;
    test_node4 = test_node4 + test_athlete4;
    

    BinaryTree test_tree;
    test_tree.insert(test_node);
    test_tree.insert(test_node2);
    test_tree.insert(test_node3);
    test_tree.insert(test_node4);

    //test_tree.remove(4);
    //test_tree.search(4);
    
    // std::cout << test_tree << std::endl;

    BinaryTree test_tree2(test_tree);
    std::cout << test_tree2 << std::endl;
    
    delete [] test_char;
    delete test_string;
    delete [] test_char2;
    delete test_string2;
    delete [] test_char3;
    delete test_string3;
    delete [] test_char4;
    delete test_string4;